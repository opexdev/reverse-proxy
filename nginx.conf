worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    sendfile on;

    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    keepalive_timeout   70;
    keepalive_requests 100;

    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    send_timeout 60s;

    ssl_certificate     /run/secrets/opex_dev_crt;
    ssl_certificate_key /run/secrets/private_pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;

    add_header Access-Control-Allow-Credentials true always;
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Headers * always;
    add_header Access-Control-Allow-Methods 'POST, PUT, PATCH, GET, DELETE, OPTIONS, HEAD' always;

    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   X-Forwarded-Host $server_name;
    proxy_set_header   X-Forwarded-Port $EXPOSED_PORT;

    resolver 127.0.0.11 valid=60s;

    server {
        listen 80;

        location /metrics {
            stub_status on;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_WALLET_STAT;

        location / {
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Headers * always;
            add_header Access-Control-Allow-Methods 'POST, PUT, PATCH, GET, DELETE, OPTIONS, HEAD' always;
            set $backend http://37.27.33.143:8080;
            proxy_pass $backend;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_KIBANA;

        location / {
            set $backend http://kibana:5601;
            proxy_pass $backend;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_GRAFANA;

        location / {
            set $backend http://grafana:3000;
            proxy_pass $backend;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_DASHBOARD;

        location / {
            set $backend http://superset:8088;
            proxy_pass $backend;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_ADMIN_PANEL;

        location ~* \.(.*)$ {
            set $backend http://admin-panel;
            proxy_pass $backend;
        }

        location / {
            set $backend http://admin-panel;
            proxy_pass $backend;
            rewrite .* / break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_WEB_APP;

        location ~* \.(.*)$ {
            set $backend http://web-app;
            proxy_pass $backend;
        }

        location / {
            set $backend http://web-app;
            proxy_pass $backend;
            rewrite .* / break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_MOBILE_APP;

        location ~* \.(.*)$ {
            set $backend http://mobile-app;
            proxy_pass $backend;
        }

        location / {
            set $backend http://mobile-app;
            proxy_pass $backend;
            rewrite .* / break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_AUTH;

        location / {
            set $backend http://auth:8080;
            proxy_pass $backend;
            rewrite ^/(.*)$ /auth/$1 break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_KC;

        location / {
            set $backend http://keycloak:8080;
            proxy_pass $backend;
            rewrite .* / break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_V2_AUTH;

        location / {
            set $backend http://auth-gateway:8080;
            proxy_pass $backend;
            rewrite .* / break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_HEALTH;

        location /accountant {
            set $backend http://accountant:8080;
            proxy_pass $backend;
            rewrite ^/accountant(.*)$ /actuator/health/$1 break;
        }

        location /api {
            set $backend http://api:8080;
            proxy_pass $backend;
            rewrite ^/api(.*)$ /actuator/health/$1 break;
        }

        location /bc-gateway {
            set $backend http://bc-gateway:8080;
            proxy_pass $backend;
            rewrite ^/bc-gateway(.*)$ /actuator/health/$1 break;
        }

        location /captcha {
            set $backend http://captcha:8080;
            proxy_pass $backend;
            rewrite ^/captcha(.*)$ /actuator/health/$1 break;
        }

        location /eventlog {
            set $backend http://eventlog:8080;
            proxy_pass $backend;
            rewrite ^/eventlog(.*)$ /actuator/health/$1 break;
        }

        location /market {
            set $backend http://market:8080;
            proxy_pass $backend;
            rewrite ^/market(.*)$ /actuator/health/$1 break;
        }

        location /matching-engine {
            set $backend http://matching-engine:8080;
            proxy_pass $backend;
            rewrite ^/matching-engine(.*)$ /actuator/health/$1 break;
        }

        location /matching-gateway {
            set $backend http://matching-gateway:8080;
            proxy_pass $backend;
            rewrite ^/matching-gateway(.*)$ /actuator/health/$1 break;
        }

        location /referral {
            set $backend http://referral:8080;
            proxy_pass $backend;
            rewrite ^/referral(.*)$ /actuator/health/$1 break;
        }

        location /auth {
            set $backend http://auth:8080;
            proxy_pass $backend;
            rewrite ^/auth(.*)$ /actuator/health/$1 break;
        }

        location /wallet {
            set $backend http://wallet:8080;
            proxy_pass $backend;
            rewrite ^/wallet(.*)$ /actuator/health/$1 break;
        }

        location /websocket {
            set $backend http://websocket:8080;
            proxy_pass $backend;
            rewrite ^/websocket(.*)$ /actuator/health/$1 break;
        }

        location /config {
            set $backend http://config:8080;
            proxy_pass $backend;
            rewrite ^/config(.*)$ /actuator/health/$1 break;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name $SERVER_NAME_API;

        if ($request_method = 'OPTIONS') {
            return 204;
        }

        include /etc/nginx/health-check.conf;

        location /wallet/transfer {
            return 403;
        }

        location /wallet/deposit {
            return 403;
        }

        location /wallet/payment/internal {
            return 403;
        }

        location /auth {
            set $backend http://auth:8080;
            proxy_pass $backend;
        }

        location /wallet {
            set $backend http://wallet:8080;
            proxy_pass $backend;
            rewrite ^/wallet/(.*)$ /$1 break;
        }

        location /gateway {
            set $backend http://matching-gateway:8080;
            proxy_pass $backend;
            rewrite ^/gateway/(.*)$ /$1 break;
        }

        location /storage {
            set $backend http://storage:8080;
            proxy_pass $backend;
            rewrite ^/storage/(.*)$ /$1 break;
        }

        location /referral {
            set $backend http://referral:8080;
            proxy_pass $backend;
            rewrite ^/referral/(.*)$ /$1 break;
        }

        location /config {
            set $backend http://config:8080;
            proxy_pass $backend;
            rewrite ^/config/(.*)$ /$1 break;
        }

        location /market {
            set $backend http://market:8080;
            proxy_pass $backend;
            rewrite ^/market/(.*)$ /$1 break;
        }

        location /stream {
            # WS config
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection  "upgrade";
            ###########
            set $backend http://websocket:8080;
            proxy_pass $backend;
            rewrite ^/stream/(.*)$ /$1 break;
        }

        location /ipg {
            set $backend http://payment:8080;
            proxy_pass $backend;
            rewrite ^/ipg/(.*)$ /$1 break;
        }

        location /admin {
            set $backend http://admin:8080;
            proxy_pass $backend;
            rewrite ^/admin/(.*)$ /$1 break;
        }

        location /api {
            set $backend http://api:8080;
            proxy_pass $backend;
            rewrite ^/api/(.*)$ /$1 break;
        }

        location /sapi {
            set $backend http://api:8080;
            proxy_pass $backend;
            rewrite ^/sapi/(.*)$ /$1 break;
        }

        location /captcha {
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Headers * always;
            add_header Access-Control-Allow-Methods 'POST, PUT, PATCH, GET, DELETE, OPTIONS, HEAD' always;
            add_header Access-Control-Expose-Headers 'Captcha-Session-Key, Captcha-Expire-Timestamp' always;
            set $backend http://captcha:8080;
            proxy_pass $backend;
            rewrite ^/captcha/(.*)$ /$1 break;
        }

        location /binance {
            proxy_set_header Host api.binance.com;
            proxy_set_header X-Real-IP '';
            proxy_set_header X-Forwarded-For '';
            proxy_set_header X-Forwarded-Host '';
            set $backend https://api.binance.com;
            proxy_pass $backend;
            rewrite ^/binance/(.*)$ /$1 break;
        }
    }

}
